{"version":3,"file":"js/964.1221ce71.js","mappings":"wQAWO,SAASA,EAAcC,GAC5B,OAAOC,EAAAA,EAAMC,KAAK,aAAcF,EAAUG,EAAAA,IACrCC,MAAK,EAAEC,MAAOA,WACNA,IAERC,OAAM,EAAEC,UAAWF,MAAOG,cAAaC,qBACtC,KAAM,CACJJ,KAAMG,EACNE,QAASD,EACV,GAET,CAOO,SAASE,EAAYC,GAC1B,OAAOX,EAAAA,EAAMY,IAAI,aAAc,CAC7BC,OAAQF,IAELR,MAAK,EAAEC,MAAOA,WACNA,IAERC,OAAM,EAAEC,UAAWF,MAAOI,qBACzB,KAAM,CACJC,QAASD,EACV,GAET,CAOO,SAASM,EAAcC,GAC5B,OAAOf,EAAAA,EAAMY,IAAK,cAAaG,KAC1BZ,MAAK,EAAEC,MAAOA,WACNA,IAERC,OAAM,EAAEC,UAAWF,MAAOI,qBACzB,KAAM,CACJC,QAASD,EACV,GAET,CAQO,SAASQ,EAAWD,EAAShB,GAClC,OAAOC,EAAAA,EAAMiB,IAAK,cAAaF,IAAWhB,EAAUG,EAAAA,IAC/CC,MAAK,IACGY,IAERV,OAAM,EAAEC,UAAWF,MAAOI,qBACzB,KAAM,CACJC,QAASD,EACV,GAET,CAOO,SAASU,EAAWH,GACzB,OAAOf,EAAAA,EAAMmB,OAAQ,cAAaJ,KAC7BZ,MAAK,SAELE,OAAM,EAAEC,UAAWF,MAAOI,qBACzB,KAAM,CACJC,QAASD,EACV,GAET,C,ioBCgHAY,EAAe,CACbC,KAAM,gB,gCA9FR,MAAMC,GAAQC,EAAAA,EAAAA,MACRC,GAASC,EAAAA,EAAAA,MAITC,IAHQC,EAAAA,EAAAA,OAGOC,EAAAA,EAAAA,IAAI,CACvBC,WAAY,GACZC,WAAY,GACZC,aAAc,MAGVxB,GAAcqB,EAAAA,EAAAA,IAAI,CACtBC,WAAY,GACZC,WAAY,GACZC,aAAc,GACdC,UAAW,KAEPC,GAAeL,EAAAA,EAAAA,IAAI,IACnBjB,GAAYiB,EAAAA,EAAAA,IAAI,CAAC,GACjBI,GAAYJ,EAAAA,EAAAA,IAAI,CAAC,GAOvBM,eAAeC,IACbxB,EAAUyB,OAAQC,EAAAA,EAAAA,GAAgBf,EAAMgB,OAExC,IACEL,EAAaG,YAAcG,EAAAA,EAAAA,GAAgBC,EAAAA,GAC7C,CAAE,OAAO,QAAC/B,IACRgC,QAAQC,MAAMjC,EAChB,CACF,CAKAyB,eAAeS,IACb,IAAKC,OAA2BC,EAAAA,EAAAA,MAC9B,OAAO,EAGT,IACE,MAAM9C,GAAW+C,EAAAA,EAAAA,GAAepB,EAAaU,MAAOJ,EAAUI,OAExDW,QAAejD,EAAAA,EAAAA,IAAaC,GAElCyB,EAAOwB,KAAK,CACVC,KAAO,UAASF,IAChBT,MAAO3B,EAAUyB,OAErB,CAAE,OAAO,KAAChC,EAAI,QAAEK,IAEd,IAAK,MAAMyC,KAAS9C,EAClBG,EAAY6B,MAAMc,GAAS9C,EAAK8C,GAElCT,QAAQC,MAAMjC,EAChB,CACF,CAOA,SAASmC,IACPrC,EAAY6B,MAAMN,YAAaqB,EAAAA,EAAAA,IAAczB,EAAaU,MAAMN,YAChEvB,EAAY6B,MAAML,cAAeqB,EAAAA,EAAAA,IAAgB1B,EAAaU,MAAML,cACpExB,EAAY6B,MAAMP,YAAawB,EAAAA,EAAAA,IAAiB3B,EAAaU,MAAMP,YAEnE,IAAK,MAAMyB,KAAYC,OAAOC,OAAOjD,EAAY6B,OAC/C,GAAIkB,EACF,OAAO,EAIX,OAAO,CACT,CAOA,SAASG,EAAaC,GACpB1B,EAAUI,MAAQsB,CACpB,C,OAnEAvB,I,irDC9HA,MAAMwB,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://frontend/./src/api/board/freeService.js","webpack://frontend/./src/views/board/free/FreeRegister.vue","webpack://frontend/./src/views/board/free/FreeRegister.vue?e129"],"sourcesContent":["import axios from \"@/api/config/axios\";\r\nimport {MULTIPART_CONFIG} from \"@/constants\";\r\n\r\n/**\r\n * 자유게시글을 등록합니다.\r\n * @param formData 등록 폼\r\n * @returns {Promise<number>}\r\n * 등록된 게시글 번호를 반환하거나,\r\n * data: 에러필드에 에러메시지가 담겨진 객체를 반환합니다.\r\n * message: API 통신 에러메시지\r\n */\r\nexport function registerFree (formData) {\r\n  return axios.post('/api/frees', formData, MULTIPART_CONFIG)\r\n      .then(({data: {data}}) => {\r\n        return data;\r\n      })\r\n      .catch(({response: {data: {errorFields, errorMessage}}}) => {\r\n        throw {\r\n          data: errorFields,\r\n          message: errorMessage\r\n        }\r\n      });\r\n}\r\n\r\n/**\r\n * 자유게시글 목록을 조회합니다.\r\n * @param condition 검색조건\r\n * @returns {Promise<Array>} 자유게시글 목록을 배열로 반환합니다.\r\n */\r\nexport function getFreeList(condition) {\r\n  return axios.get('/api/frees', {\r\n    params: condition\r\n  })\r\n      .then(({data: {data}}) => {\r\n        return data;\r\n      })\r\n      .catch(({response: {data: {errorMessage}}}) => {\r\n        throw {\r\n          message: errorMessage\r\n        }\r\n      });\r\n}\r\n\r\n/**\r\n * 자유게시글 상세정보를 조회합니다.\r\n * @param boardId 자유게시글 번호\r\n * @returns {Promise<Object>} 자유게시글 상세정보\r\n */\r\nexport function getFreeDetail(boardId) {\r\n  return axios.get(`/api/frees/${boardId}`)\r\n      .then(({data: {data}}) => {\r\n        return data;\r\n      })\r\n      .catch(({response: {data: {errorMessage}}}) => {\r\n        throw {\r\n          message: errorMessage\r\n        }\r\n      });\r\n}\r\n\r\n/**\r\n * 자유게시글을 업데이트합니다.\r\n * @param boardId 자유게시글 번호\r\n * @param formData 업데이트 폼\r\n * @return {Promise<number>} 자유게시글 번호\r\n */\r\nexport function updateFree(boardId, formData) {\r\n  return axios.put(`/api/frees/${boardId}`, formData, MULTIPART_CONFIG)\r\n      .then(() => {\r\n        return boardId;\r\n      })\r\n      .catch(({response: {data: {errorMessage}}}) => {\r\n        throw {\r\n          message: errorMessage\r\n        }\r\n      });\r\n}\r\n\r\n/**\r\n * 자유게시글을 삭제합니다.\r\n * @param boardId 자유게시글 번호\r\n * @return {Promise<void>}\r\n */\r\nexport function deleteFree(boardId) {\r\n  return axios.delete(`/api/frees/${boardId}`)\r\n      .then(() => {\r\n      })\r\n      .catch(({response: {data: {errorMessage}}}) => {\r\n        throw {\r\n          message: errorMessage\r\n        };\r\n      });\r\n}","<template>\r\n\r\n  <GNB></GNB>\r\n\r\n  <!-- 타이틀  -->\r\n  <board-title title=\"자유게시판\"></board-title>\r\n\r\n  <!-- 등록 폼 -->\r\n  <div class=\"register-container\">\r\n\r\n    <!-- 게시글 카테고리 -->\r\n    <div class=\"register-category-container\">\r\n\r\n      <board-form-title name=\"분류\" class=\"board-form-title-category\"></board-form-title>\r\n\r\n      <div class=\"register-category-input-container\">\r\n        <category-select\r\n            v-model=\"registerForm.categoryId\"\r\n            @change=\"errorFields.categoryId = validateCategory(registerForm.categoryId)\"\r\n            :category-list=\"categoryList\"\r\n            class=\"register-category\">\r\n        </category-select>\r\n        <input-error :error-msg=\"errorFields.categoryId\"></input-error>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <!-- 게시글 제목 -->\r\n    <div class=\"register-title-container\">\r\n\r\n      <board-form-title name=\"제목\" class=\"board-form-title-title\"></board-form-title>\r\n\r\n      <div class=\"register-title-input-container\">\r\n        <base-input\r\n            v-model=\"registerForm.boardTitle\"\r\n            @change=\"errorFields.boardTitle = validateTitle(registerForm.boardTitle)\"\r\n            placeholder=\"제목을 입력해 주세요.\"\r\n            class=\"register-title\">\r\n        </base-input>\r\n        <base-input-error :error-msg=\"errorFields.boardTitle\"></base-input-error>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <!-- 게시글 내용 -->\r\n    <div class=\"register-content-container\">\r\n\r\n      <board-form-title name=\"내용\" class=\"board-form-title-content\"></board-form-title>\r\n\r\n      <div class=\"register-content-input-container\">\r\n        <base-textarea\r\n            v-model=\"registerForm.boardContent\"\r\n            @change=\"errorFields.boardContent = validateTitle(registerForm.boardContent)\"\r\n            class=\"register-content\">\r\n        </base-textarea>\r\n        <base-input-error :error-msg=\"errorFields.boardContent\"></base-input-error>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 게시글 첨부파일 -->\r\n    <div class=\"register-file-container\">\r\n\r\n      <board-form-title\r\n          :required=\"false\"\r\n          name=\"첨부\"\r\n          class=\"board-form-title-file\">\r\n      </board-form-title>\r\n\r\n      <div class=\"register-file-input-container\">\r\n        <board-file-list @upload-file=\"onUploadFile\"></board-file-list>\r\n        <base-input-error :error-msg=\"errorFields.saveFiles\"></base-input-error>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <!-- 등록 폼 버튼 -->\r\n    <board-form-btn-container\r\n        @register=\"onRegister\"\r\n        @cancel=\"router.push({path: '/frees', query: condition});\"\r\n        form-type=\"register\">\r\n    </board-form-btn-container>\r\n\r\n  </div>\r\n\r\n</template>\r\n\r\n<script setup>\r\n/**\r\n * 자유게시글 등록 폼 컴포넌트\r\n */\r\nimport BoardTitle from \"@/components/board/BoardTitle.vue\";\r\nimport BoardFormTitle from \"@/components/board/BoardFormTitle.vue\";\r\nimport BaseInput from \"@/components/base/BaseInput.vue\";\r\nimport InputError from \"@/components/base/BaseInputError.vue\";\r\nimport BaseInputError from \"@/components/base/BaseInputError.vue\";\r\nimport CategorySelect from \"@/components/CategorySelect.vue\";\r\nimport BaseTextarea from \"@/components/base/BaseTextarea.vue\";\r\nimport {ref} from \"vue\";\r\nimport {createCondition} from \"@/util/queryParamUtil\";\r\nimport {useRoute, useRouter} from \"vue-router\";\r\nimport {FREE_CATEGORY_ID} from \"@/constants\";\r\nimport {getCategoryList} from \"@/api/categoryService\";\r\nimport BoardFileList from \"@/components/board/BoardFileList.vue\";\r\nimport {validateCategory, validateContent, validateTitle} from \"@/util/boardValidUtil\";\r\nimport {useStore} from \"vuex\";\r\nimport {registerFree} from \"@/api/board/freeService\";\r\nimport GNB from \"@/components/GNB.vue\";\r\nimport BoardFormBtnContainer from \"@/components/board/BoardFormBtnContainer.vue\";\r\nimport {isAuthenticated} from \"@/util/authUtil\";\r\nimport {createFormData} from \"@/util/boardUtil\";\r\n\r\nconst route = useRoute();\r\nconst router = useRouter();\r\nconst store = useStore();\r\n\r\n/* 자유게시글 등록정보 */\r\nconst registerForm = ref({\r\n  categoryId: '', /* 카테고리 번호 */\r\n  boardTitle: '', /* 게시글 제목 */\r\n  boardContent: '', /* 게시글 내용 */\r\n})\r\n/* 유효성검증 에러메시지 */\r\nconst errorFields = ref({\r\n  categoryId: '', /* 카테고리 번호 */\r\n  boardTitle: '', /* 게시글 제목 */\r\n  boardContent: '', /* 게시글 내용 */\r\n  saveFiles: '', /* 첨부파일 */\r\n})\r\nconst categoryList = ref([]); // 카테고리 목록\r\nconst condition = ref({}); // 검색조건\r\nconst saveFiles = ref({}); /* 저장 파일 목록 */\r\n\r\ninitFreeRegister();\r\n\r\n/**\r\n * 자유게시글 등록 컴포넌트를 초기화합니다.\r\n */\r\nasync function initFreeRegister() {\r\n  condition.value = createCondition(route.query);\r\n\r\n  try {\r\n    categoryList.value = await getCategoryList(FREE_CATEGORY_ID);\r\n  } catch ({message}) {\r\n    console.error(message);\r\n  }\r\n}\r\n\r\n/**\r\n * 자유게시글을 등록합니다.\r\n */\r\nasync function onRegister() {\r\n  if (!validateRegisterForm() && !isAuthenticated()) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    const formData = createFormData(registerForm.value, saveFiles.value);\r\n\r\n    const freeId = await registerFree(formData);\r\n\r\n    router.push({\r\n      path: `/frees/${freeId}`,\r\n      query: condition.value\r\n    })\r\n  } catch ({data, message}) {\r\n    // 유효성검증에 실패한 필드의 에러메시지를 저장합니다.\r\n    for (const field in data) {\r\n      errorFields.value[field] = data[field];\r\n    }\r\n    console.error(message);\r\n  }\r\n}\r\n\r\n/**\r\n * 등록폼을 검증합니다.\r\n *\r\n * @returns {boolean} 유효하면 true\r\n */\r\nfunction validateRegisterForm() {\r\n  errorFields.value.boardTitle = validateTitle(registerForm.value.boardTitle);\r\n  errorFields.value.boardContent = validateContent(registerForm.value.boardContent);\r\n  errorFields.value.categoryId = validateCategory(registerForm.value.categoryId);\r\n\r\n  for (const errorMsg of Object.values(errorFields.value)) {\r\n    if (errorMsg) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * 파일 인풋 컴포넌트에서 전송된 파일들을 저장합니다.\r\n *\r\n * @param uploadFiles\r\n */\r\nfunction onUploadFile(uploadFiles) {\r\n  saveFiles.value = uploadFiles\r\n}\r\n</script>\r\n\r\n\r\n<script>\r\nexport default {\r\n  name: \"FreeRegister\"\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.register-category-container, .register-title-container,\r\n.register-content-container, .register-file-container {\r\n  border-bottom: 1px solid var(--border-color-gray);\r\n  height: 100%;\r\n  display: flex;\r\n}\r\n\r\n.register-category-input-container, .register-title-input-container,\r\n.register-content-input-container, .register-file-input-container {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  margin: 5px 0 5px 10px;\r\n}\r\n\r\n.register-category-container {\r\n  border-top: 1px solid var(--border-color-gray);\r\n}\r\n\r\n.register-category {\r\n  width: 200px;\r\n}\r\n\r\n.register-title {\r\n  width: 95%;\r\n  height: 40px;\r\n}\r\n\r\n.register-content {\r\n  width: 95%;\r\n  min-height: 200px;\r\n}\r\n\r\n.form-btn-container {\r\n  margin: 30px 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 20px;\r\n}\r\n\r\n.register-btn-save, .register-btn-cancel {\r\n  width: 70px;\r\n}\r\n\r\n.register-btn-cancel {\r\n  background-color: var(--sub-color-violet);\r\n}\r\n\r\n</style>","import script from \"./FreeRegister.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./FreeRegister.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./FreeRegister.vue?vue&type=style&index=0&id=541c0172&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-541c0172\"]])\n\nexport default __exports__"],"names":["registerFree","formData","axios","post","MULTIPART_CONFIG","then","data","catch","response","errorFields","errorMessage","message","getFreeList","condition","get","params","getFreeDetail","boardId","updateFree","put","deleteFree","delete","__default__","name","route","useRoute","router","useRouter","registerForm","useStore","ref","categoryId","boardTitle","boardContent","saveFiles","categoryList","async","initFreeRegister","value","createCondition","query","getCategoryList","FREE_CATEGORY_ID","console","error","onRegister","validateRegisterForm","isAuthenticated","createFormData","freeId","push","path","field","validateTitle","validateContent","validateCategory","errorMsg","Object","values","onUploadFile","uploadFiles","__exports__"],"sourceRoot":""}