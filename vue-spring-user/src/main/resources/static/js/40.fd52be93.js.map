{"version":3,"file":"js/40.fd52be93.js","mappings":"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","sources":["webpack://frontend/./src/api/board/freeService.js","webpack://frontend/./src/api/fileService.js","webpack://frontend/./src/util/queryParamUtil.js","webpack://frontend/./src/components/FileList.vue","webpack://frontend/./src/components/FileList.vue?183e","webpack://frontend/./src/components/board/BoardDetailBtnContainer.vue","webpack://frontend/./src/components/board/BoardDetailBtnContainer.vue?e204","webpack://frontend/./src/components/board/BoardDetailContent.vue","webpack://frontend/./src/components/board/BoardDetailContent.vue?c903","webpack://frontend/./src/components/board/BoardDetailHeader.vue","webpack://frontend/./src/components/board/BoardDetailHeader.vue?33ee","webpack://frontend/./src/components/board/BoardTitle.vue","webpack://frontend/./src/components/board/BoardTitle.vue?0d6e","webpack://frontend/./src/api/replyService.js","webpack://frontend/./src/components/Reply.vue","webpack://frontend/./src/components/Reply.vue?42d6","webpack://frontend/./src/views/board/free/FreeDetail.vue","webpack://frontend/./src/views/board/free/FreeDetail.vue?ec8c"],"sourcesContent":["import axios from \"@/api/config/axios\";\r\nimport {MULTIPART_CONFIG} from \"@/constants\";\r\n\r\n/**\r\n * 자유게시글을 등록합니다.\r\n * @param formData 등록 폼\r\n * @returns {Promise<number>}\r\n * 등록된 게시글 번호를 반환하거나,\r\n * data: 에러필드에 에러메시지가 담겨진 객체를 반환합니다.\r\n * message: API 통신 에러메시지\r\n */\r\nexport function registerFree (formData) {\r\n  return axios.post('/api/frees', formData, MULTIPART_CONFIG)\r\n      .then(({data: {data}}) => {\r\n        return data;\r\n      })\r\n      .catch(({response: {data: {errorFields, errorMessage}}}) => {\r\n        throw {\r\n          data: errorFields,\r\n          message: errorMessage\r\n        }\r\n      });\r\n}\r\n\r\n/**\r\n * 자유게시글 목록을 조회합니다.\r\n * @param condition 검색조건\r\n * @returns {Promise<Array>} 자유게시글 목록을 배열로 반환합니다.\r\n */\r\nexport function getFreeList(condition) {\r\n  return axios.get('/api/frees', {\r\n    params: condition\r\n  })\r\n      .then(({data: {data}}) => {\r\n        return data;\r\n      })\r\n      .catch(({response: {data: {errorMessage}}}) => {\r\n        throw {\r\n          message: errorMessage\r\n        }\r\n      });\r\n}\r\n\r\n/**\r\n * 자유게시글 상세정보를 조회합니다.\r\n * @param boardId 자유게시글 번호\r\n * @returns {Promise<Object>} 자유게시글 상세정보\r\n */\r\nexport function getFreeDetail(boardId) {\r\n  return axios.get(`/api/frees/${boardId}`)\r\n      .then(({data: {data}}) => {\r\n        return data;\r\n      })\r\n      .catch(({response: {data: {errorMessage}}}) => {\r\n        throw {\r\n          message: errorMessage\r\n        }\r\n      });\r\n}\r\n\r\n/**\r\n * 자유게시글을 업데이트합니다.\r\n * @param boardId 자유게시글 번호\r\n * @param formData 업데이트 폼\r\n * @return {Promise<number>} 자유게시글 번호\r\n */\r\nexport function updateFree(boardId, formData) {\r\n  return axios.put(`/api/frees/${boardId}`, formData, MULTIPART_CONFIG)\r\n      .then(() => {\r\n        return boardId;\r\n      })\r\n      .catch(({response: {data: {errorMessage}}}) => {\r\n        throw {\r\n          message: errorMessage\r\n        }\r\n      });\r\n}\r\n\r\n/**\r\n * 자유게시글을 삭제합니다.\r\n * @param boardId 자유게시글 번호\r\n * @return {Promise<void>}\r\n */\r\nexport function deleteFree(boardId) {\r\n  return axios.delete(`/api/frees/${boardId}`)\r\n      .then(() => {\r\n      })\r\n      .catch(({response: {data: {errorMessage}}}) => {\r\n        throw {\r\n          message: errorMessage\r\n        };\r\n      });\r\n}","import axios from \"@/api/config/axios\";\r\n\r\n/**\r\n * 게시글에 첨부된 파일목록을 조회합니다.\r\n * @param boardId 게시글 번호\r\n * @return {Promise<Array>} 첨부된 파일목록을 배열로 반환합니다.\r\n */\r\nexport function getBoardFileList(boardId) {\r\n  return axios.get(`/api/file/board/${boardId}`)\r\n      .then(({data: {data}}) => {\r\n        return data;\r\n      })\r\n      .catch(({response: {data: {errorMessage}}}) => {\r\n        throw {\r\n          message: errorMessage\r\n        }\r\n      });\r\n}\r\n\r\n/**\r\n * 파일을 다운로드합니다.\r\n * @param fileId 파일번호\r\n */\r\nexport const fileDown = (fileId) => {\r\n  return axios({\r\n    url: `/api/file/${fileId}`,\r\n    method: 'GET',\r\n    responseType: 'blob',  // 바이너리데이터를 받을수있는 브라우저전용 데이터타입\r\n  })\r\n      .then((response) => {\r\n        const url = window.URL.createObjectURL(new Blob([response.data]))\r\n        const link = document.createElement('a')\r\n        link.href = url\r\n        link.download = extractDownloadFilename(response);\r\n\r\n        document.body.appendChild(link)\r\n        link.click();\r\n        link.remove();\r\n\r\n        window.URL.revokeObjectURL(url);\r\n      })\r\n      .catch(error => {\r\n        if (error.response.data) {\r\n          const reader = new FileReader();\r\n          reader.onload = function() {\r\n            const errorData = JSON.parse(reader.result);\r\n            console.error(errorData.errorMessage);\r\n            alert(errorData.errorMessage);\r\n          };\r\n          reader.readAsText(error.response.data);\r\n        }\r\n      })\r\n};\r\n\r\n/**\r\n * 다운로드 파일이름을 추출합니다.\r\n * @param response 서버 응답데이터\r\n * @returns {string} 다운로드 파일이름을 반환합니다.\r\n */\r\nfunction extractDownloadFilename(response) {\r\n  const disposition = response.headers[\"content-disposition\"];\r\n  return decodeURI(\r\n      disposition\r\n          .match(/filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/)[1]\r\n          .replace(/['\"]/g, \"\")\r\n  );\r\n}","/**\r\n * 라우트쿼리로부터 검색조건을 설정합니다.\r\n * @param routeQuery 라우트쿼리\r\n * @param defaultLimit 기본 limit 10\r\n * @return {object} 검색조건이 담긴 condition 객체를 반환합니다.\r\n */\r\nexport function createCondition(routeQuery, defaultLimit = 10) {\r\n    const {page, fromDate, toDate, searchCategory, search, limit, orderCondition, order} = routeQuery;\r\n    const condition = {};\r\n    condition.page = page || 1;\r\n    condition.fromDate = fromDate || '';\r\n    condition.toDate = toDate || '';\r\n    condition.search = search || '';\r\n    condition.searchCategory = searchCategory || '';\r\n    condition.limit = limit || defaultLimit;\r\n    condition.orderCondition = orderCondition || '';\r\n    condition.order = order || 'desc';\r\n\r\n    return condition;\r\n}","<template>\r\n\r\n  <div class=\"file-list-container\">\r\n\r\n    <div\r\n        v-for=\"file in fileList\"\r\n        :key=\"file.fileId\"\r\n        class=\"file-container\">\r\n\r\n      <!-- 썸네일이 존재하는 경우 썸네일을 표시합니다. (갤러리) -->\r\n      <img\r\n          v-if=\"file.galleryThumbName != null\"\r\n          :src=\"`/api/file/image/${file.galleryThumbName}`\"\r\n          alt=\"썸네일 이미지\"\r\n          class=\"file-thumb\">\r\n\r\n      <!-- 첨부파일 아이콘 -->\r\n      <font-awesome-icon v-else icon=\"paperclip\" class=\"file-icon\" />\r\n\r\n      <!-- 첨부파일 다운로드 링크 -->\r\n      <a :href=\"`/api/file/${file.fileId}`\" class=\"file-link\">{{ file.fileOrgName }}</a>\r\n\r\n      <!-- 첨부파일 삭제 핸들러 버튼 -->\r\n      <base-button\r\n          v-if=\"isUpdate\"\r\n          @click=\"onDelete(file.fileId)\"\r\n          class=\"file-btn-delete\"\r\n          name=\"X\">\r\n      </base-button>\r\n\r\n    </div>\r\n\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\n/**\r\n * 게시글의 첨부파일 목록 컴포넌트\r\n */\r\nimport BaseButton from \"@/components/base/BaseButton.vue\";\r\n\r\nexport default {\r\n  name: \"FileList\",\r\n  components: {BaseButton},\r\n  props: {\r\n    fileList: {\r\n      type: Array,\r\n      required: true,\r\n      description: '게시글 첨부파일 목록'\r\n    },\r\n    isUpdate: {\r\n      type: Boolean,\r\n      default: false,\r\n      required: false,\r\n      description: '업데이트의 경우 삭제버튼 등장'\r\n    }\r\n  },\r\n  methods: {\r\n    /* 삭제할 첨부파일을 상위컴포넌트에 전송합니다.*/\r\n    onDelete(fileId) {\r\n      this.$emit('delete-file', fileId);\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.file-list-container {\r\n  font-size: var(--middle-font-size);\r\n}\r\n\r\n.file-container {\r\n  margin: 10px 0;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.file-thumb {\r\n  border-radius: 3px;\r\n  margin-right: 10px;\r\n}\r\n.file-icon {\r\n  margin-right: 5px;\r\n}\r\n\r\n.file-link {\r\n  padding-bottom: 2px;\r\n}\r\n.file-btn-delete {\r\n  margin-left: 30px;\r\n}\r\n\r\n</style>","import { render } from \"./FileList.vue?vue&type=template&id=66d6ae47&scoped=true\"\nimport script from \"./FileList.vue?vue&type=script&lang=js\"\nexport * from \"./FileList.vue?vue&type=script&lang=js\"\n\nimport \"./FileList.vue?vue&type=style&index=0&id=66d6ae47&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-66d6ae47\"]])\n\nexport default __exports__","<template>\r\n\r\n  <div class=\"board-detail-btn-container\">\r\n\r\n    <!-- 해당 작성자만 표시되는 수정폼으로 이동하는 버튼 -->\r\n    <base-button\r\n        v-if=\"isCurrentUserId(board.userId)\"\r\n        @click=\"this.$router.push({path: `${path}/update/${board.boardId}`, query: condition})\"\r\n        class=\"board-detail-btn-update\" name=\"수정\">\r\n    </base-button>\r\n\r\n    <!-- 목록으로 이동하는 버튼 -->\r\n    <base-button\r\n        @click=\"this.$router.push({path: `${path}`, query: condition})\"\r\n        class=\"board-detail-btn-list\" name=\"목록\">\r\n    </base-button>\r\n\r\n    <!-- 해당 작성자만 표시되는 삭제 버튼 -->\r\n    <base-button\r\n        v-if=\"isCurrentUserId(board.userId)\"\r\n        @click=\"onDelete\"\r\n        class=\"board-detail-btn-delete\" name=\"삭제\">\r\n    </base-button>\r\n\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\n/**\r\n * 게시글 상세페이지의 버튼 컨테이너 컴포넌트\r\n */\r\nimport BaseButton from \"@/components/base/BaseButton.vue\";\r\nimport {isCurrentUserId} from \"@/util/authUtil\";\r\n\r\nexport default {\r\n  name: \"BoardDetailBtnContainer\",\r\n  components: {BaseButton},\r\n  props: {\r\n    condition: {\r\n      type: Object,\r\n      required: true,\r\n      description: '검색조건'\r\n    },\r\n    path: {\r\n      type: String,\r\n      required: true,\r\n      description: '게시글 경로'\r\n    },\r\n    board: {\r\n      type: Object,\r\n      default: undefined,\r\n      required: true,\r\n      description: '게시글'\r\n    }\r\n  },\r\n  methods: {\r\n    isCurrentUserId,\r\n    onDelete() {\r\n      if (confirm('삭제 하시겠습니까?')) {\r\n        this.$emit('delete-board');\r\n      }\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.board-detail-btn-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 20px;\r\n  margin: 30px 0;\r\n}\r\n\r\n.board-detail-btn-container button {\r\n  width: 70px;\r\n}\r\n\r\n.board-detail-btn-list {\r\n  background-color: var(--sub-color-violet)\r\n}\r\n\r\n.board-detail-btn-delete {\r\n  color: black;\r\n  background-color: white;\r\n  border: var(--main-border);\r\n}\r\n\r\n</style>","import { render } from \"./BoardDetailBtnContainer.vue?vue&type=template&id=889ba420&scoped=true\"\nimport script from \"./BoardDetailBtnContainer.vue?vue&type=script&lang=js\"\nexport * from \"./BoardDetailBtnContainer.vue?vue&type=script&lang=js\"\n\nimport \"./BoardDetailBtnContainer.vue?vue&type=style&index=0&id=889ba420&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-889ba420\"]])\n\nexport default __exports__","<template>\r\n\r\n  <div class=\"board-detail-content\">{{ board.boardContent }}</div>\r\n\r\n</template>\r\n\r\n<script>\r\n/**\r\n * 게시글 상세페이지의 내용을 나타내는 컴포넌트\r\n */\r\nexport default {\r\n  name: \"BoardDetailContent\",\r\n  props: {\r\n    board: {\r\n      type: Object,\r\n      required: true,\r\n      description: '게시글 정보'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.board-detail-content {\r\n  padding: 10px;\r\n  border: 1px solid var(--border-color-gray);\r\n  border-radius: 3px;\r\n  min-height: 150px;\r\n  font-size: var(--middle-font-size);\r\n}\r\n\r\n</style>","import { render } from \"./BoardDetailContent.vue?vue&type=template&id=334ae2ce&scoped=true\"\nimport script from \"./BoardDetailContent.vue?vue&type=script&lang=js\"\nexport * from \"./BoardDetailContent.vue?vue&type=script&lang=js\"\n\nimport \"./BoardDetailContent.vue?vue&type=style&index=0&id=334ae2ce&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-334ae2ce\"]])\n\nexport default __exports__","<template>\r\n\r\n  <div class=\"board-detail-header-container\">\r\n\r\n    <!-- 문의게시글인 경우에는 카테고리가 표시되지 않습니다. -->\r\n    <div v-if=\"!isQna\" class=\"board-detail-category\">{{ board.categoryName }}</div>\r\n\r\n    <!-- 문의게시글인 경우 답변상태가 제목에 표시됩니다. -->\r\n    <div class=\"board-detail-title-container\">\r\n      <div class=\"board-detail-title\">{{ board.boardTitle }}</div>\r\n      <span v-if=\"isQna\" class=\"board-detail-title-answer\">{{ answerStatus }}</span>\r\n    </div>\r\n\r\n    <!-- 생성일시 -->\r\n    <div class=\"board-detail-regdate\">{{ board.createDate }}</div>\r\n\r\n    <!-- 작성자 이름 -->\r\n    <div class=\"board-detail-username\">{{ board.userName }}</div>\r\n\r\n  </div>\r\n\r\n  <!-- 조회수 -->\r\n  <div class=\"board-detail-viewcnt\">조회수 : {{ board.viewCnt }}</div>\r\n\r\n</template>\r\n\r\n<script>\r\n/**\r\n * 게시글 상세페이지의 헤더 컴포넌트\r\n */\r\nexport default {\r\n  name: \"BoardDetailHeader\",\r\n  props: {\r\n    board: {\r\n      type: Object,\r\n      required: true,\r\n      description: '게시글 정보'\r\n    },\r\n    isQna: {\r\n      type: Boolean,\r\n      default: false,\r\n      required: false,\r\n      description: '문의게시글 여부'\r\n    }\r\n  },\r\n  computed: {\r\n    /* 문의게시글의 답변상태에 따라 반환 값을 제목에 첨삭합니다. */\r\n    answerStatus() {\r\n      return this.isQna && this.board.answerStatus ? '(답변완료)' : '(미답변)'\r\n    },\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.board-detail-header-container {\r\n  height: 50px;\r\n  border-bottom: 2px solid var(--border-color-gray);\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: var(--middle-font-size);\r\n}\r\n\r\n.board-detail-category {\r\n  width: 50px;\r\n  font-weight: bold;\r\n  text-align: left;\r\n  padding-left: 10px;\r\n}\r\n\r\n.board-detail-title-container {\r\n  display: flex;\r\n  flex-grow: 1;\r\n  text-align: left;\r\n}\r\n\r\n.board-detail-title-answer {\r\n  margin-left: 10px;\r\n}\r\n\r\n.board-detail-regdate {\r\n  width: 150px;\r\n  font-size: var(--middle-font-size);\r\n  text-align: right;\r\n}\r\n\r\n.board-detail-username {\r\n  width: 70px;\r\n  font-size: var(--middle-font-size);\r\n  text-align: right;\r\n}\r\n\r\n\r\n\r\n\r\n.board-detail-viewcnt {\r\n  margin-top: 10px;\r\n  text-align: right;\r\n  font-size: var(--middle-font-size)\r\n}\r\n\r\n</style>","import { render } from \"./BoardDetailHeader.vue?vue&type=template&id=64e8a92c&scoped=true\"\nimport script from \"./BoardDetailHeader.vue?vue&type=script&lang=js\"\nexport * from \"./BoardDetailHeader.vue?vue&type=script&lang=js\"\n\nimport \"./BoardDetailHeader.vue?vue&type=style&index=0&id=64e8a92c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-64e8a92c\"]])\n\nexport default __exports__","<template>\r\n\r\n  <header>\r\n    <h1>{{ title }}</h1>\r\n  </header>\r\n\r\n</template>\r\n\r\n<script>\r\n/**\r\n * 게시글의 제목 컴포넌트\r\n */\r\nexport default {\r\n  name: \"BoardTitle\",\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      required: true,\r\n      description: '게시글 타이틀',\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\nheader {\r\n  margin: 20px 0;\r\n}\r\n\r\nh1 {\r\n  font-size: var(--title-font-size);\r\n  margin: 0;\r\n}\r\n\r\n</style>","import { render } from \"./BoardTitle.vue?vue&type=template&id=71f638fd&scoped=true\"\nimport script from \"./BoardTitle.vue?vue&type=script&lang=js\"\nexport * from \"./BoardTitle.vue?vue&type=script&lang=js\"\n\nimport \"./BoardTitle.vue?vue&type=style&index=0&id=71f638fd&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-71f638fd\"]])\n\nexport default __exports__","import axios from \"@/api/config/axios\";\r\n\r\n/**\r\n * 게시글에 등록된 댓글목록을 조회합니다.\r\n * @param boardId 게시글 번호\r\n * @return {Promise<Array>} 게시글에 등록된 댓글목록을 배열로 반환합니다.\r\n */\r\nexport function getBoardReplyList(boardId) {\r\n  return axios.get(`/api/replies/board/${boardId}`)\r\n      .then(({data: {data}}) => {\r\n        return data;\r\n      })\r\n      .catch(({response: {data: {errorMessage}}}) => {\r\n        throw {\r\n          message: errorMessage\r\n        }\r\n      });\r\n}\r\n\r\n/**\r\n * 댓글을 등록합니다.\r\n * @param reply 댓글등록정보\r\n * @return {Promise<Object>} 등록된 댓글정보\r\n */\r\nexport function registerReply(reply) {\r\n  return axios.post('/api/replies', reply)\r\n      .then(({data: {data}}) => {\r\n        return data;\r\n      })\r\n      .catch(({response: {data: {errorMessage}}}) => {\r\n        throw {\r\n          message: errorMessage\r\n        }\r\n      });\r\n}\r\n\r\n/**\r\n * 댓글을 삭제합니다.\r\n * @param replyId 댓글번호\r\n * @returns {Promise<void>}\r\n */\r\nexport function deleteReply(replyId) {\r\n  return axios.delete(`/api/replies/${replyId}`)\r\n      .then()\r\n      .catch(({response: {data: {errorMessage}}}) => {\r\n        throw {\r\n          message: errorMessage\r\n        }\r\n      });\r\n}","<template>\r\n\r\n  <div class=\"reply-container\">\r\n\r\n    <!-- 댓글목록 -->\r\n    <div class=\"reply-list-container\">\r\n\r\n      <div v-for=\"reply in replyList\"\r\n           :key=\"reply.replyId\"\r\n           class=\"reply\">\r\n\r\n        <div class=\"reply-left-container\">\r\n          <div class=\"reply-writer-date-container\">\r\n            <div class=\"reply-writer\">{{ reply.userName }}</div>\r\n            <div class=\"reply-date\">{{ reply.createDate }}</div>\r\n          </div>\r\n          <div class=\"reply-content\">{{ reply.replyContent }}</div>\r\n        </div>\r\n\r\n        <!-- 해당 댓글 작성자만 삭제가 표시됩니다. -->\r\n        <div\r\n            v-if=\"isCurrentUserId(reply.userId)\"\r\n            @click=\"onDelete(reply.replyId)\"\r\n            class=\"reply-right-container\">\r\n          <div class=\"reply-delete\">삭제</div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <!-- 댓글등록 (인증된상태에만 표시합니다.) -->\r\n    <div v-if=\"isAuthenticated\" class=\"reply-register-container\">\r\n      <base-input\r\n          v-model=\"replyContent\"\r\n          :placeholder=\"replyPlaceHolder\"\r\n          class=\"reply-register-input\"></base-input>\r\n      <base-button @click=\"onRegister\" name=\"등록\" class=\"reply-register-button\"></base-button>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {deleteReply, registerReply} from \"@/api/replyService\";\r\nimport {isAuthenticated, isCurrentUserId} from \"@/util/authUtil\";\r\nimport BaseButton from \"@/components/base/BaseButton.vue\";\r\nimport BaseInput from \"@/components/base/BaseInput.vue\";\r\n\r\nexport default {\r\n  name: \"Reply\",\r\n  components: {BaseInput, BaseButton},\r\n\r\n  data() {\r\n    return {\r\n      replyContent: '', /* 댓글 내용 */\r\n      replyError: '', /* 댓글 에러 메시지*/\r\n      replyPlaceHolder: '댓글을 입력해 주세요.',\r\n    }\r\n  },\r\n\r\n  props: {\r\n    replyList: {\r\n      type: Array,\r\n      required: true,\r\n      description: '댓글 목록'\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    isCurrentUserId,\r\n    isAuthenticated,\r\n\r\n    /**\r\n     * 댓글을 등록하고 등록된 댓글을 게시글 상세 컴포넌트에 전송합니다.\r\n     */\r\n    onRegister() {\r\n      if (this.validateReply()) {\r\n        const replyDto = {\r\n          boardId: this.$route.params.boardId,\r\n          replyContent: this.replyContent,\r\n        };\r\n\r\n        registerReply(replyDto)\r\n            .then(reply => {\r\n              this.$emit('register-reply', reply);\r\n              this.replyContent = '';\r\n            })\r\n            .catch(({message}) => {\r\n              console.error(message);\r\n              alert(message);\r\n            });\r\n      }\r\n    },\r\n\r\n    /**\r\n     * 댓글을 삭제합니다.\r\n     */\r\n    async onDelete(replyId) {\r\n      if (confirm('댓글을 삭제하시겠습니까?')) {\r\n        try {\r\n          await deleteReply(replyId);\r\n          this.$emit('delete-reply', replyId);\r\n        } catch ({message}) {\r\n          console.error(message);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * 빈 댓글을 검증합니다.\r\n     * @returns {boolean}\r\n     */\r\n    validateReply() {\r\n      if (!this.replyContent) {\r\n        alert('댓글을 입력해주세요.');\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.reply-container {\r\n  background-color: antiquewhite;\r\n  padding: 10px;\r\n}\r\n\r\n.reply {\r\n  border-bottom: 1px solid black;\r\n  padding: 10px 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.reply-writer-date-container {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.reply-writer {\r\n  font-size: var(--small-font-size);\r\n  font-weight: bold;\r\n}\r\n\r\n.reply-date {\r\n  font-size: 12px;\r\n}\r\n\r\n.reply-content {\r\n  font-size: 14px;\r\n}\r\n\r\n.reply-delete {\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n}\r\n\r\n.reply-register-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  height: 100px;\r\n}\r\n\r\n.reply-register-input {\r\n  font-size: 12px;\r\n  height: 50px;\r\n  flex-grow: 1;\r\n}\r\n\r\n.reply-register-input::placeholder {\r\n  color: #ccc;\r\n  font-size: var(--small-font-size);\r\n}\r\n\r\n.reply-register-button {\r\n  margin-left: 10px;\r\n  height: 50px;\r\n  width: 50px;\r\n  background-color: white;\r\n  color: black;\r\n  border: var(--main-border);\r\n}\r\n\r\n</style>","import { render } from \"./Reply.vue?vue&type=template&id=6f7c6493&scoped=true\"\nimport script from \"./Reply.vue?vue&type=script&lang=js\"\nexport * from \"./Reply.vue?vue&type=script&lang=js\"\n\nimport \"./Reply.vue?vue&type=style&index=0&id=6f7c6493&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-6f7c6493\"]])\n\nexport default __exports__","<template>\r\n\r\n  <GNB></GNB>\r\n\r\n  <!-- 게시글 제목 -->\r\n  <board-title title=\"자유게시판\"></board-title>\r\n\r\n  <!-- 게시글 상세 헤더 -->\r\n  <board-detail-header :board=\"free\"></board-detail-header>\r\n\r\n  <!-- 게시글 상세 내용 -->\r\n  <board-detail-content :board=\"free\" class=\"free-detail-content\"></board-detail-content>\r\n\r\n  <!-- 첨부 파일 목록 -->\r\n  <file-list :file-list=\"fileList\" class=\"free-detail-file-list\"></file-list>\r\n\r\n  <!-- 댓글 -->\r\n  <reply\r\n      @register-reply=\"onRegisterReply\"\r\n      @delete-reply=\"onDeleteReply\"\r\n      :reply-list=\"replyList\">\r\n  </reply>\r\n\r\n  <!-- 게시글 상세 버튼 목록 -->\r\n  <board-detail-btn-container\r\n      @delete-board=\"onDelete\"\r\n      :board=\"free\"\r\n      :condition=\"condition\"\r\n      path=\"/frees\"\r\n      class=\"free-detail-btn-container\">\r\n  </board-detail-btn-container>\r\n\r\n</template>\r\n\r\n<script setup>\r\n/**\r\n * 자유게시글 상세페이지 컴포넌트\r\n */\r\n\r\nimport BoardDetailContent from \"@/components/board/BoardDetailContent.vue\";\r\nimport BoardDetailHeader from \"@/components/board/BoardDetailHeader.vue\";\r\nimport BoardTitle from \"@/components/board/BoardTitle.vue\";\r\nimport {useRoute, useRouter} from \"vue-router\";\r\nimport {ref} from \"vue\";\r\nimport {createCondition} from \"@/util/queryParamUtil\";\r\nimport {formatDate} from \"@/util/formatUtil\";\r\nimport {deleteFree, getFreeDetail} from \"@/api/board/freeService\";\r\nimport {getBoardReplyList} from \"@/api/replyService\";\r\nimport {getBoardFileList} from \"@/api/fileService\";\r\nimport FileList from \"@/components/FileList.vue\";\r\nimport Reply from \"@/components/Reply.vue\";\r\nimport BoardDetailBtnContainer from \"@/components/board/BoardDetailBtnContainer.vue\";\r\nimport GNB from \"@/components/GNB.vue\";\r\n\r\nconst route = useRoute();\r\nconst router = useRouter();\r\n\r\nconst condition = ref({}); /* 검색조건 */\r\nconst free = ref({}); /* 자유게시글 */\r\nconst fileList = ref([]); /* 파일 목록 */\r\nconst replyList = ref([]); /* 댓글 목록*/\r\n\r\ninitFreeDetail();\r\n\r\n/**\r\n * 자유게시글 상세컴포넌트를 초기화합니다.\r\n */\r\nasync function initFreeDetail() {\r\n  condition.value = createCondition(route.query);\r\n\r\n  try {\r\n    const boardId = route.params.boardId;\r\n    const [freeResult, fileResult, replyResult] = await Promise.all([\r\n      getFreeDetail(boardId),\r\n      getBoardFileList(boardId),\r\n      getBoardReplyList(boardId)\r\n    ]);\r\n    free.value = freeResult;\r\n    free.value.createDate = formatDate(free.value.createDate);\r\n    fileList.value = fileResult;\r\n    replyList.value = replyResult;\r\n    replyList.value.forEach(e => e.createDate = formatDate(e.createDate));\r\n  } catch ({message}) {\r\n    console.error(message);\r\n  }\r\n}\r\n\r\n/**\r\n * 댓글 컴포넌트에서 등록한 현재 댓글목록에 추가합니다.\r\n * @param reply 등록된 댓글\r\n */\r\nfunction onRegisterReply(reply) {\r\n  reply.createDate = formatDate(reply.createDate);\r\n  replyList.value.push(reply)\r\n}\r\n\r\n/**\r\n * 댓글 컴포넌트에서 삭제한 댓글을 목록에서 삭제합니다.\r\n * @param replyId 삭제된 댓글번호\r\n */\r\nfunction onDeleteReply(replyId) {\r\n  replyList.value = replyList.value.filter(e => e.replyId !== replyId);\r\n}\r\n\r\n/**\r\n * 자유게시글을 삭제합니다.\r\n */\r\nasync function onDelete() {\r\n  try {\r\n    await deleteFree(route.params.boardId);\r\n    router.push({path: '/frees', query: condition.value});\r\n  } catch ({message}) {\r\n    alert(message);\r\n  }\r\n}\r\n</script>\r\n\r\n<script>\r\n\r\nexport default {\r\n  name: \"FreeDetail\"\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.free-detail-content {\r\n  margin-top: 50px;\r\n}\r\n\r\n.free-detail-file-list {\r\n  padding: 10px;\r\n  margin: 10px 0;\r\n}\r\n\r\n.free-detail-btn-container {\r\n  margin: 30px 0;\r\n}\r\n\r\n</style>","import script from \"./FreeDetail.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./FreeDetail.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./FreeDetail.vue?vue&type=style&index=0&id=52a8c690&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-52a8c690\"]])\n\nexport default __exports__"],"names":["registerFree","formData","axios","post","MULTIPART_CONFIG","then","data","catch","response","errorFields","errorMessage","message","getFreeList","condition","get","params","getFreeDetail","boardId","updateFree","put","deleteFree","delete","getBoardFileList","createCondition","routeQuery","defaultLimit","page","fromDate","toDate","searchCategory","search","limit","orderCondition","order","class","_createElementBlock","_hoisted_1","_Fragment","_renderList","$props","fileList","file","key","fileId","galleryThumbName","src","alt","_createBlock","_component_font_awesome_icon","icon","_createElementVNode","href","fileOrgName","_hoisted_3","isUpdate","_component_base_button","onClick","$event","$options","onDelete","name","components","BaseButton","props","type","Array","required","description","Boolean","default","methods","this","$emit","__exports__","render","isCurrentUserId","board","userId","_cache","$router","push","path","query","_createVNode","Object","String","undefined","confirm","_toDisplayString","boardContent","isQna","_hoisted_2","categoryName","_hoisted_4","boardTitle","_hoisted_5","answerStatus","_hoisted_6","createDate","_hoisted_7","userName","_hoisted_8","viewCnt","computed","title","getBoardReplyList","registerReply","reply","deleteReply","replyId","_hoisted_9","replyList","replyContent","isAuthenticated","_hoisted_11","_component_base_input","$data","placeholder","replyPlaceHolder","onRegister","BaseInput","replyError","validateReply","replyDto","$route","console","error","alert","__default__","route","useRoute","router","useRouter","ref","free","async","initFreeDetail","value","freeResult","fileResult","replyResult","Promise","all","formatDate","forEach","e","onRegisterReply","onDeleteReply","filter"],"sourceRoot":""}